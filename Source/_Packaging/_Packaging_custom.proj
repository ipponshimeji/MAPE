<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <Packaging_InputDir_Windows>$(OutputPath)Windows\</Packaging_InputDir_Windows>
    <Packaging_WorkDir>..\__Obj\$(Configuration)\_Packaging\</Packaging_WorkDir>
    <Packaging_WorkDir_Windows>$(Packaging_WorkDir)Windows\</Packaging_WorkDir_Windows>
    <Packaging_OutputDir>..\__Package\$(Configuration)\</Packaging_OutputDir>
    <Packaging_SignAndZipCommand_FileName>SignAndZip.bat</Packaging_SignAndZipCommand_FileName>
  </PropertyGroup>

  <Target Name="Packaging_GetVersion">
    <ReadLinesFromFile File="Version.txt" >
      <Output TaskParameter="Lines" PropertyName="Packaging_VersionFile_Lines"/>
    </ReadLinesFromFile>
    <CreateProperty Value="$(Packaging_VersionFile_Lines.Substring(0, $(Packaging_VersionFile_Lines.IndexOf(';'))))">
      <Output TaskParameter="Value" PropertyName="Packaging_Version" />
    </CreateProperty>

    <CreateProperty Value="$([System.IO.Path]::GetFullPath('$(Packaging_OutputDir)MAPE_$(Packaging_Version)_Windows.zip'))">
      <Output TaskParameter="Value" PropertyName="Packaging_PackageFilePath_Windows" />
    </CreateProperty>
  </Target>

  <Target Name="Packaging_Prepare">
    <!-- Use Exec task instead of Delete or RemoveDir task to remove the whole target directory tree -->
    <Exec Command="del /Q $(Packaging_OutputDir)*.*" Condition="Exists('$(Packaging_OutputDir)')" />
    <Exec Command="rmdir /S /Q $(Packaging_WorkDir)" />

    <!-- for Windows version -->
    <ReadLinesFromFile File="FilesForWindows.txt" >
      <Output  TaskParameter="Lines" ItemName="Packaging_Files_Windows"/>
    </ReadLinesFromFile>
    <Copy
      SourceFiles="Version.txt"  
      DestinationFolder="$(Packaging_WorkDir_Windows)MAPE"
    /> 
    <Copy
      SourceFiles="@(Packaging_Files_Windows->'$(Packaging_InputDir_Windows)%(Identity)')"  
      DestinationFiles="@(Packaging_Files_Windows->'$(Packaging_WorkDir_Windows)MAPE\%(Identity)')"  
    />
  </Target>

  <Target
    Name="Packaging_Zip"
    DependsOnTargets="Packaging_Prepare;Packaging_GetVersion"
    Condition="'$(Configuration)' == 'Release'"
  >
    <MakeDir Directories="$(Packaging_OutputDir)" />
    <Exec Command="PowerShell Compress-Archive -Path $(Packaging_WorkDir_Windows)MAPE -DestinationPath $(Packaging_PackageFilePath_Windows)" />
    <Exec Command="PowerShell (Get-FileHash &quot;$(Packaging_PackageFilePath_Windows)&quot; -Algorithm SHA256).Hash &gt; &quot;$(Packaging_PackageFilePath_Windows).sha256&quot;" />
  </Target>

  <Target
    Name="Packaging_CreateSignAndZipCommandFile"
    DependsOnTargets="Packaging_Prepare;Packaging_GetVersion"
    Condition="'$(Configuration)' == 'Release_Signed'"
  >
    <ItemGroup>
      <Packaging_FilesToBeSigned_Windows Include="$(Packaging_WorkDir_Windows)MAPE\**\mape*.dll;$(Packaging_WorkDir_Windows)MAPE\**\mape*.exe" />
      <Packaging_SignAndZipCommand_Windows Include="$(Packaging_WorkDir_Windows)$(Packaging_SignAndZipCommand_FileName)" />
    </ItemGroup>
    <CreateProperty Value="$([System.IO.Path]::GetFullPath('$(Packaging_WorkDir_Windows)MAPE'))">
      <Output TaskParameter="Value" PropertyName="Packaging_FilesDirPath_Windows" />
    </CreateProperty>

    <WriteLinesToFile  
      File="@(Packaging_SignAndZipCommand_Windows)"
      Lines="
        %40echo off;
        setlocal;
        set KEYFILE=%251;
        if &quot;%25KEYFILE%25&quot; == &quot;&quot; (;
          echo Specify your key file as an argument.;
          echo ex. $(Packaging_SignAndZipCommand_FileName) YourKey.snk;
          exit /b;
        );
        @(Packaging_FilesToBeSigned_Windows -> 'sn -R &quot;%(FullPath)&quot; &quot;%25KEYFILE%25&quot; &amp; if ERRORLEVEL 1 (echo Failed. &amp; exit /b)');
        endlocal;
        PowerShell Compress-Archive -Path &quot;$(Packaging_FilesDirPath_Windows)&quot; -DestinationPath &quot;$(Packaging_PackageFilePath_Windows)&quot;;
        PowerShell (Get-FileHash &quot;$(Packaging_PackageFilePath_Windows)&quot; -Algorithm SHA256).Hash &gt; &quot;$(Packaging_PackageFilePath_Windows).sha256&quot;"
      Overwrite="true"
      Encoding="ASCII"
    />
    <MakeDir Directories="$(Packaging_OutputDir)" />
  </Target>

  <Target
    Name="Packaging_Package"
    DependsOnTargets="Packaging_Zip;Packaging_CreateSignAndZipCommandFile"
    Condition="'$(Configuration)' == 'Release' Or '$(Configuration)' == 'Release_Signed'"
  >
  </Target>
</Project>